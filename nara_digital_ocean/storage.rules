rules_version = '2';

// NARA Firebase Storage Security Rules
service firebase.storage {
  match /b/{bucket}/o {
    
    // Public assets (logos, images, documents)
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && 
        (getUserRole() in ['admin', 'editor', 'content_manager']) &&
        isAllowedUpload(request.resource);
    }
    
    // News and article images
    match /news/{newsId}/{fileName} {
      allow read: if true; // Public read access for news images
      allow write: if request.auth != null && 
        (getUserRole() in ['admin', 'editor', 'content_manager']) &&
        isAllowedUpload(request.resource);
    }
    
    // Research project files
    match /research/{projectId}/{fileName} {
      allow read: if resource.metadata.visibility == 'public' ||
        (request.auth != null && 
         (getUserRole() in ['admin', 'researcher'] || 
          request.auth.uid in getProjectMembers(projectId)));
      allow write: if request.auth != null && 
        (getUserRole() in ['admin', 'researcher'] ||
         request.auth.uid in getProjectMembers(projectId)) &&
        isAllowedUpload(request.resource);
    }
    
    // Publication files
    match /publications/{publicationId}/{fileName} {
      allow read: if resource.metadata.access_level == 'public' ||
        (request.auth != null && resource.metadata.access_level == 'registered');
      allow write: if request.auth != null && 
        (getUserRole() in ['admin', 'researcher'] ||
         request.auth.uid in getPublicationAuthors(publicationId)) &&
        isAllowedUpload(request.resource);
    }
    
    // User profile images and documents
    match /users/{userId}/{fileName} {
      allow read: if request.auth != null && 
        (request.auth.uid == userId || 
         getUserRole() in ['admin', 'hr_manager']);
      allow write: if request.auth != null && 
        (request.auth.uid == userId || 
         getUserRole() in ['admin']) &&
        isAllowedUpload(request.resource);
    }
    
    // Application documents (procurement & job applications)
    match /applications/{applicationId}/{fileName} {
      allow read: if request.auth != null && 
        (getUserRole() in ['admin', 'hr_manager', 'procurement_officer'] ||
         request.auth.uid == getApplicationOwner(applicationId));
      allow write: if request.auth != null && 
        request.auth.uid == getApplicationOwner(applicationId) &&
        isAllowedUpload(request.resource);
    }

    // Emergency response report attachments (public submissions)
    match /emergency_incidents/{reportId}/{fileName} {
      allow read: if request.auth != null && getUserRole() == 'admin';
      allow write: if isAllowedUpload(request.resource);
    }

    match /non_emergency_support/{reportId}/{fileName} {
      allow read: if request.auth != null && getUserRole() == 'admin';
      allow write: if isAllowedUpload(request.resource);
    }

    match /environmental_incidents/{reportId}/{fileName} {
      allow read: if request.auth != null && getUserRole() == 'admin';
      allow write: if isAllowedUpload(request.resource);
    }
    
    // Event images and documents
    match /events/{eventId}/{fileName} {
      allow read: if true; // Public read for event materials
      allow write: if request.auth != null && 
        getUserRole() in ['admin', 'event_manager'] &&
        isAllowedUpload(request.resource);
    }
    
    // Temporary uploads (auto-delete after 24 hours)
    match /temp/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAllowedUpload(request.resource);
      allow delete: if request.auth != null;
    }
    
    // Administrative files (admin only)
    match /admin/{fileName} {
      allow read: if request.auth != null && 
        getUserRole() == 'admin';
      allow write: if request.auth != null && 
        getUserRole() == 'admin' &&
        isAllowedUpload(request.resource);
    }
    
    // Helper functions
    function getUserRole() {
      return firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function getProjectMembers(projectId) {
      return firestore.get(/databases/(default)/documents/research_projects/$(projectId)).data.team_members;
    }
    
    function getPublicationAuthors(publicationId) {
      return firestore.get(/databases/(default)/documents/publications/$(publicationId)).data.authors;
    }
    
    function getApplicationOwner(applicationId) {
      return firestore.get(/databases/(default)/documents/applications/$(applicationId)).data.applicant_id;
    }
    
    // File size and type restrictions
    function isValidFileSize(upload) {
      return upload != null && upload.size < 50 * 1024 * 1024; // 50MB limit
    }
    
    function isValidFileType(upload) {
      return upload != null && (
        upload.contentType.matches('image/.*') ||
        upload.contentType.matches('application/pdf') ||
        upload.contentType.matches('application/msword') ||
        upload.contentType.matches('application/vnd.openxmlformats-officedocument.*') ||
        upload.contentType.matches('text/.*')
      );
    }

    function isAllowedUpload(upload) {
      return upload == null || (isValidFileSize(upload) && isValidFileType(upload));
    }
    
    // Default deny rule with size and type validation
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
