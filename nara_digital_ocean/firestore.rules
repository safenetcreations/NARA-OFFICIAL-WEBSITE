rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.admin == true;
    }
    
    function isOwner(uid) {
      return request.auth != null && 
             request.auth.uid == uid;
    }
    
    function isLibrarian() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/adminProfiles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/adminProfiles/$(request.auth.uid)).data.role in ['admin', 'librarian'];
    }
    
    function isResearcher() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/libraryUsers/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/libraryUsers/$(request.auth.uid)).data.role == 'researcher';
    }
    
    // ============================================
    // EXISTING COLLECTIONS (Keep these)
    // ============================================
    
    // Division Collections (Public Read Access)
    match /divisions/{divisionId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /divisionContent/{contentId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /divisionImages/{imageId} {
      allow read: if true;
      allow write: if true; // Allow public write for now (can be restricted later)
      allow update: if true;
      allow create: if true;
    }
    
    // Publications Collection
    match /publications/{publicationId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Division-related subcollections
    match /divisions/{divisionId}/projects/{projectId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /divisions/{divisionId}/teamMembers/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Projects Collection
    match /projects/{projectId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Team Members Collection
    match /teamMembers/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Partners Collection
    match /partners/{partnerId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Teams Collection
    match /teams/{teamId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Media Images Collection
    match /media_images/{imageId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Media Videos Collection
    match /media_videos/{videoId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Admin Profiles Collection
    match /adminProfiles/{userId} {
      allow read: if isAdmin() || isOwner(userId);
      allow create: if isAdmin();
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // Researcher Profiles Collection
    match /researcherProfiles/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Government EIA Applications
    match /government_eia_applications/{applicationId} {
      allow read: if isAuthenticated() && 
                     (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                      (isOwner(resource.data.userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Government Licenses
    match /government_licenses/{licenseId} {
      allow read: if isAuthenticated() && 
                     (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // User Analytics
    match /analytics/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // Admin Logs
    match /admin_logs/{logId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // ============================================
    // NEW: LIBRARY USER SYSTEM COLLECTIONS
    // ============================================
    
    // Library Users Collection
    match /libraryUsers/{userId} {
      // Users can read their own profile
      // Admins and librarians can read all profiles
      allow read: if isOwner(userId) || isAdmin() || isLibrarian();
      
      // Users can create their own profile during registration
      allow create: if isAuthenticated() && 
                       isOwner(userId) &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email;
      
      // Users can update their own profile
      // Admins and librarians can update any profile
      // Prevent users from changing their role, permissions, or statistics
      allow update: if (isOwner(userId) && 
                        request.resource.data.role == resource.data.role &&
                        request.resource.data.uid == resource.data.uid &&
                        request.resource.data.email == resource.data.email &&
                        request.resource.data.permissions == resource.data.permissions &&
                        request.resource.data.libraryCard == resource.data.libraryCard) ||
                       isAdmin() || 
                       isLibrarian();
      
      // Only admins can delete user profiles
      allow delete: if isAdmin();
    }
    
    // Research Submissions Collection
    match /researchSubmissions/{submissionId} {
      // Public can read approved/published submissions
      // Authors can read their own submissions (any status)
      // Admins can read all submissions
      allow read: if (resource.data.submission.status in ['approved', 'published'] &&
                      resource.data.visibility in ['public', 'institutional']) ||
                     isOwner(resource.data.authorId) ||
                     isAdmin() ||
                     isLibrarian();
      
      // Only researchers can create submissions
      allow create: if isAuthenticated() && 
                       isResearcher() && 
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.submission.status == 'pending';
      
      // Authors can update their own submissions if status is 'pending' or 'revision_requested'
      // They cannot change the status themselves
      // Admins can always update (for review/approval)
      allow update: if (isOwner(resource.data.authorId) && 
                        resource.data.submission.status in ['pending', 'revision_requested'] &&
                        request.resource.data.submission.status == resource.data.submission.status) ||
                       isAdmin() ||
                       isLibrarian();
      
      // Only admins can delete submissions
      allow delete: if isAdmin();
    }
    
    // Patron Borrowing Records (for library system integration)
    match /patronBorrowings/{recordId} {
      // Users can read their own borrowing records
      // Admins and librarians can read all records
      allow read: if isAuthenticated() && 
                     (isOwner(resource.data.userId) || 
                      isAdmin() || 
                      isLibrarian());
      
      // Only admins and librarians can create/update borrowing records
      allow write: if isAdmin() || isLibrarian();
    }
    
    // User Favorites/Reading Lists
    match /userFavorites/{userId}/items/{itemId} {
      // Users can only access their own favorites
      allow read, write: if isOwner(userId);
    }
    
    // Library Fines
    match /libraryFines/{fineId} {
      // Users can read their own fines
      // Admins and librarians can read all fines
      allow read: if isAuthenticated() &&
                     (isOwner(resource.data.userId) ||
                      isAdmin() ||
                      isLibrarian());
      
      // Only admins and librarians can create/update fines
      allow write: if isAdmin() || isLibrarian();
    }
    
    // Library Holds/Reservations
    match /libraryHolds/{holdId} {
      // Users can read their own holds
      // Admins and librarians can read all holds
      allow read: if isAuthenticated() &&
                     (isOwner(resource.data.userId) ||
                      isAdmin() ||
                      isLibrarian());
      
      // Users can create holds for themselves
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.userId);
      
      // Users can cancel their own holds
      // Admins and librarians can update any hold
      allow update: if isOwner(resource.data.userId) ||
                       isAdmin() ||
                       isLibrarian();
      
      // Users can delete their own holds
      // Admins can delete any hold
      allow delete: if isOwner(resource.data.userId) ||
                       isAdmin() ||
                       isLibrarian();
    }
    
    // User Notifications
    match /userNotifications/{userId}/notifications/{notificationId} {
      // Users can only access their own notifications
      allow read, write: if isOwner(userId);
    }
    
    // Research Comments/Reviews (optional feature)
    match /researchComments/{commentId} {
      // Anyone can read comments on published research
      allow read: if true;
      
      // Authenticated users can create comments
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid;
      
      // Users can update/delete their own comments
      // Admins can moderate any comment
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // User Activity Log (optional)
    match /userActivityLog/{userId}/activities/{activityId} {
      // Users can read their own activity log
      // Admins can read all activity logs
      allow read: if isOwner(userId) || isAdmin();
      
      // Only the system (via Cloud Functions) or admins should write to activity logs
      allow write: if isAdmin();
    }
    
    // ============================================
    // RESEARCH EXCELLENCE PORTAL COLLECTIONS
    // ============================================
    
    // Research Content Collection
    match /researchContent/{contentId} {
      // Published content can be read by authenticated users
      // Draft content can only be read by the author or admins
      allow read: if (resource.data.status == 'published' && isAuthenticated()) ||
                     isOwner(resource.data.uploadedBy) ||
                     isAdmin() ||
                     isLibrarian();
      
      // Only researchers, professors, and admins can create content
      allow create: if isAuthenticated() &&
                       request.resource.data.uploadedBy == request.auth.uid &&
                       (isResearcher() || isAdmin() || isLibrarian());
      
      // Authors can update their own content
      // Admins can update any content
      allow update: if isOwner(resource.data.uploadedBy) ||
                       isAdmin() ||
                       isLibrarian();
      
      // Only admins can delete content
      allow delete: if isAdmin();
    }
    
    // User Bookmarks for Research Content
    match /userBookmarks/{userId}/bookmarks/{bookmarkId} {
      // Users can only access their own bookmarks
      allow read, write: if isOwner(userId);
    }
    
    // ============================================
    // ANALYTICS & IMPACT ASSESSMENT COLLECTIONS
    // ============================================
    
    // Impact Assessments - Public read, admin write
    match /impactAssessments/{assessmentId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Policy Impacts - Public read, admin write
    match /policyImpacts/{impactId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Stakeholder Feedback - Public read, admin write
    match /stakeholderFeedback/{feedbackId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Project Outcomes - Public read, admin write
    match /projectOutcomes/{outcomeId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // ROI Calculations - Public read, admin write
    match /roiCalculations/{calculationId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ============================================
    // PHYSICAL LIBRARY MANAGEMENT SYSTEM COLLECTIONS
    // ============================================

    // Library Members Collection
    match /library_members/{memberId} {
      // Members can read their own profile, librarians and admins can read all
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.uid ||
                      isAdmin() ||
                      isLibrarian());

      // Anyone authenticated can create a membership (registration)
      allow create: if isAuthenticated() &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.status == 'active';

      // Members can update their own contact info only
      // Librarians and admins can update any field
      allow update: if (isAuthenticated() &&
                        request.auth.uid == resource.data.uid &&
                        request.resource.data.member_id == resource.data.member_id &&
                        request.resource.data.status == resource.data.status &&
                        request.resource.data.max_books_allowed == resource.data.max_books_allowed) ||
                       isAdmin() ||
                       isLibrarian();

      // Only admins can delete members
      allow delete: if isAdmin();
    }

    // Book Reservations Collection
    match /book_reservations/{reservationId} {
      // Members can read their own reservations, librarians can read all
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.uid ||
                      isAdmin() ||
                      isLibrarian());

      // Members can create reservations for themselves
      allow create: if isAuthenticated() &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.status == 'pending';

      // Members can cancel their own pending reservations
      // Librarians can update any reservation (mark as ready/collected)
      allow update: if (isAuthenticated() &&
                        request.auth.uid == resource.data.uid &&
                        resource.data.status == 'pending' &&
                        request.resource.data.status == 'cancelled') ||
                       isAdmin() ||
                       isLibrarian();

      // Only admins can delete reservations
      allow delete: if isAdmin();
    }

    // Book Loans Collection
    match /book_loans/{loanId} {
      // Members can read their own loans, librarians can read all
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.uid ||
                      isAdmin() ||
                      isLibrarian());

      // Only librarians and admins can create/update loans
      allow create, update: if isAdmin() || isLibrarian();

      // Only admins can delete loans
      allow delete: if isAdmin();
    }

    // Borrowing History Collection
    match /borrowing_history/{historyId} {
      // Members can read their own history, librarians can read all
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.uid ||
                      isAdmin() ||
                      isLibrarian());

      // Only librarians and admins can create history records
      allow create: if isAdmin() || isLibrarian();

      // Members can add ratings/reviews to their own history
      // Librarians can update any history
      allow update: if (isAuthenticated() &&
                        request.auth.uid == resource.data.uid) ||
                       isAdmin() ||
                       isLibrarian();

      // Only admins can delete history
      allow delete: if isAdmin();
    }

    // Library Fines Collection (Physical Library)
    match /library_fines/{fineId} {
      // Members can read their own fines, librarians can read all
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.uid ||
                      isAdmin() ||
                      isLibrarian());

      // Only librarians and admins can create/update fines
      allow create, update: if isAdmin() || isLibrarian();

      // Only admins can delete fines
      allow delete: if isAdmin();
    }

    // Library Inventory Collection
    match /library_inventory/{inventoryId} {
      // Anyone can read inventory (to check availability)
      allow read: if true;

      // Only librarians and admins can update inventory
      allow create, update: if isAdmin() || isLibrarian();

      // Only admins can delete inventory records
      allow delete: if isAdmin();
    }

    // Library Transactions Collection
    match /library_transactions/{transactionId} {
      // Members can read their own transactions, librarians can read all
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.uid ||
                      isAdmin() ||
                      isLibrarian());

      // Only librarians and admins can create transactions
      allow create: if isAdmin() || isLibrarian();

      // No updates or deletes (audit trail)
      allow update, delete: if false;
    }

    // Library Settings Collection
    match /library_settings/{settingId} {
      // Anyone can read settings (loan periods, fines, etc.)
      allow read: if true;

      // Only admins can update settings
      allow write: if isAdmin();
    }

    // ============================================
    // MARITIME SERVICES HUB COLLECTIONS
    // ============================================

    // Maritime Vessels Collection
    match /maritime_vessels/{vesselId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Maritime Ports Collection
    match /maritime_ports/{portId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Maritime Services Collection
    match /maritime_services/{serviceId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Hydrographic Charts Collection
    match /hydro_charts/{chartId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Hydrographic Chart Requests Collection
    match /hydro_chart_requests/{requestId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    // Hydrographic Survey Requests Collection
    match /hydro_survey_requests/{requestId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    // Hydrographic Data Requests Collection
    match /hydro_data_requests/{requestId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    // Crowd Bathymetry Collection
    match /hydro_crowd_bathymetry/{dataId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    // Maritime Permits Collection
    match /maritime_permits/{permitId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    // Maritime Alerts Collection
    match /maritime_alerts/{alertId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Maritime Safety Reports Collection
    match /maritime_safety_reports/{reportId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    // Maritime Bookings Collection
    match /maritime_bookings/{bookingId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    // ============================================
    // FISH ADVISORY SYSTEM COLLECTIONS
    // ============================================

    // Fish Advisories Collection
    match /fish_advisories/{advisoryId} {
      // Anyone can read fish advisories (public safety information)
      allow read: if true;
      // Temporarily allow public write for seeding (change to isAdmin() in production)
      allow write: if true;
    }

    // Fishing Zones Collection
    match /fishing_zones/{zoneId} {
      // Anyone can read fishing zones (public information)
      allow read: if true;
      // Temporarily allow public write for seeding (change to isAdmin() in production)
      allow write: if true;
    }

    // Fish Market Prices Collection
    match /fish_market_prices/{priceId} {
      // Anyone can read fish market prices (public data)
      allow read: if true;
      // Temporarily allow public write for seeding (change to isAdmin() in production)
      allow write: if true;
    }

    // Seasonal Restrictions Collection
    match /seasonal_restrictions/{restrictionId} {
      // Anyone can read seasonal restrictions (public information)
      allow read: if true;
      // Temporarily allow public write for seeding (change to isAdmin() in production)
      allow write: if true;
    }

    // ============================================
    // FISH MARKET INTELLIGENCE COLLECTIONS
    // ============================================

    // Scraper Metadata Collection
    match /scraper_metadata/{metadataId} {
      // Anyone can read scraper metadata (last run time, etc.)
      allow read: if true;
      // Only admins and scrapers can write
      allow write: if isAdmin();
    }
  }
}
