name: Pre-Deployment Quality Gate

on:
  pull_request:
    branches:
      - main
      - master
      - production

  push:
    branches:
      - staging

jobs:
  quality-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd website-optimization-agent
          pip install -r requirements.txt

      - name: Run quality audit
        run: |
          cd website-optimization-agent
          python nara_optimizer.py --max-pages 50 --output ../quality_check

      - name: Check for critical issues
        id: quality_check
        run: |
          if [ ! -f quality_check/optimization_report.json ]; then
            echo "❌ Audit failed to generate report"
            exit 1
          fi

          BROKEN_LINKS=$(jq '.broken_links | length' quality_check/optimization_report.json)
          DUPLICATES=$(jq '.duplicate_content | length' quality_check/optimization_report.json)
          CRITICAL_ACCESSIBILITY=$(jq '[.page_metadata[] | select(.accessibility_issues | length > 3)] | length' quality_check/optimization_report.json)

          echo "broken_links=$BROKEN_LINKS" >> $GITHUB_OUTPUT
          echo "duplicates=$DUPLICATES" >> $GITHUB_OUTPUT
          echo "critical_accessibility=$CRITICAL_ACCESSIBILITY" >> $GITHUB_OUTPUT

          # Set overall status
          if [ "$BROKEN_LINKS" -gt 5 ]; then
            echo "status=fail" >> $GITHUB_OUTPUT
            echo "❌ CRITICAL: Found $BROKEN_LINKS broken links (threshold: 5)"
            exit 1
          fi

          if [ "$DUPLICATES" -gt 3 ]; then
            echo "status=fail" >> $GITHUB_OUTPUT
            echo "❌ CRITICAL: Found $DUPLICATES duplicate content issues (threshold: 3)"
            exit 1
          fi

          if [ "$CRITICAL_ACCESSIBILITY" -gt 10 ]; then
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "⚠️ WARNING: Found $CRITICAL_ACCESSIBILITY pages with critical accessibility issues"
          else
            echo "status=pass" >> $GITHUB_OUTPUT
            echo "✅ Quality check passed!"
          fi

      - name: Generate PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            let report = '';
            try {
              const jsonReport = JSON.parse(fs.readFileSync('quality_check/optimization_report.json', 'utf8'));

              const brokenLinks = jsonReport.broken_links?.length || 0;
              const duplicates = jsonReport.duplicate_content?.length || 0;
              const placeholders = jsonReport.placeholder_text?.length || 0;

              const statusIcon = brokenLinks === 0 && duplicates === 0 ? '✅' : '⚠️';

              report = `## ${statusIcon} Pre-Deployment Quality Check

              **Status**: ${brokenLinks > 5 || duplicates > 3 ? '❌ FAILED' : brokenLinks > 0 || duplicates > 0 ? '⚠️ WARNING' : '✅ PASSED'}

              ### 📊 Audit Results

              | Metric | Count | Status |
              |--------|-------|--------|
              | Broken Links | ${brokenLinks} | ${brokenLinks === 0 ? '✅' : brokenLinks > 5 ? '❌' : '⚠️'} |
              | Duplicate Content | ${duplicates} | ${duplicates === 0 ? '✅' : duplicates > 3 ? '❌' : '⚠️'} |
              | Placeholder Text | ${placeholders} | ${placeholders === 0 ? '✅' : '⚠️'} |

              ### 🎯 Recommendations

              ${brokenLinks > 0 ? `- Fix ${brokenLinks} broken links before merging\n` : ''}
              ${duplicates > 0 ? `- Resolve ${duplicates} duplicate content issues\n` : ''}
              ${placeholders > 0 ? `- Replace ${placeholders} placeholder texts\n` : ''}
              ${brokenLinks === 0 && duplicates === 0 && placeholders === 0 ? '✅ No critical issues found!\n' : ''}

              📁 **Full audit results available in workflow artifacts**

              ---
              🤖 Generated by NARA Website Optimization Agent
              `;
            } catch (error) {
              report = `⚠️ Unable to generate full report: ${error.message}`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Upload quality check results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: quality-check-results-pr-${{ github.event.pull_request.number || github.run_number }}
          path: quality_check/
          retention-days: 30
