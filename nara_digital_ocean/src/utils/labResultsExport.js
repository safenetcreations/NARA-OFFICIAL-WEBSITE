import * as XLSX from 'xlsx';

/**
 * Export lab results to Excel file
 */
export const exportResultsToExcel = (results, filename = 'NARA_Lab_Results') => {
  try {
    // Prepare data for Excel
    const excelData = results.map(result => ({
      'Result ID': result.id || 'N/A',
      'Test Type': result.testType || 'N/A',
      'Sample Type': result.sampleType || 'N/A',
      'Sample ID': result.sampleId || 'N/A',
      'Status': result.status || 'N/A',
      'Project Name': result.projectName || 'N/A',
      'Date Submitted': result.createdAt ? new Date(result.createdAt).toLocaleDateString() : 'N/A',
      'Date Completed': result.completedAt ? new Date(result.completedAt).toLocaleDateString() : 'N/A',
      'Location': result.location || 'N/A',
      'Researcher': result.researcherName || 'N/A',
      'Notes': result.notes || 'N/A'
    }));

    // Create worksheet
    const worksheet = XLSX.utils.json_to_sheet(excelData);

    // Set column widths
    const columnWidths = [
      { wch: 15 }, // Result ID
      { wch: 25 }, // Test Type
      { wch: 20 }, // Sample Type
      { wch: 20 }, // Sample ID
      { wch: 15 }, // Status
      { wch: 30 }, // Project Name
      { wch: 15 }, // Date Submitted
      { wch: 15 }, // Date Completed
      { wch: 25 }, // Location
      { wch: 25 }, // Researcher
      { wch: 40 }  // Notes
    ];
    worksheet['!cols'] = columnWidths;

    // Create workbook
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Lab Results');

    // Add metadata sheet
    const metadata = [
      ['Export Information'],
      ['Generated By', 'NARA Laboratory Results Portal'],
      ['Export Date', new Date().toLocaleString()],
      ['Total Records', results.length],
      [''],
      ['About NARA'],
      ['Organization', 'National Aquatic Resources Research & Development Agency'],
      ['Website', 'https://nara-web-73384.web.app'],
      ['Contact', 'info@nara.gov.lk']
    ];
    const metadataSheet = XLSX.utils.aoa_to_sheet(metadata);
    XLSX.utils.book_append_sheet(workbook, metadataSheet, 'Info');

    // Generate filename with timestamp
    const timestamp = new Date().toISOString().slice(0, 10);
    const finalFilename = `${filename}_${timestamp}.xlsx`;

    // Download file
    XLSX.writeFile(workbook, finalFilename);

    return {
      success: true,
      filename: finalFilename,
      recordCount: results.length
    };
  } catch (error) {
    console.error('Error exporting to Excel:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * Export single result with detailed parameters
 */
export const exportSingleResultToExcel = (result, filename = 'Lab_Result_Detail') => {
  try {
    const workbook = XLSX.utils.book_new();

    // Main result info
    const mainInfo = [
      ['NARA Laboratory Result Report'],
      [''],
      ['Result Information'],
      ['Result ID', result.id || 'N/A'],
      ['Test Type', result.testType || 'N/A'],
      ['Sample Type', result.sampleType || 'N/A'],
      ['Sample ID', result.sampleId || 'N/A'],
      ['Status', result.status || 'N/A'],
      [''],
      ['Project Details'],
      ['Project Name', result.projectName || 'N/A'],
      ['Researcher', result.researcherName || 'N/A'],
      ['Location', result.location || 'N/A'],
      [''],
      ['Dates'],
      ['Submitted', result.createdAt ? new Date(result.createdAt).toLocaleString() : 'N/A'],
      ['Completed', result.completedAt ? new Date(result.completedAt).toLocaleString() : 'N/A'],
      [''],
      ['Notes'],
      [result.notes || 'No notes available']
    ];

    const mainSheet = XLSX.utils.aoa_to_sheet(mainInfo);
    mainSheet['!cols'] = [{ wch: 20 }, { wch: 50 }];
    XLSX.utils.book_append_sheet(workbook, mainSheet, 'Result Details');

    // Parameters sheet (if available)
    if (result.parameters && result.parameters.length > 0) {
      const parametersData = result.parameters.map(param => ({
        'Parameter': param.name || 'N/A',
        'Value': param.value || 'N/A',
        'Unit': param.unit || 'N/A',
        'Method': param.method || 'N/A',
        'Status': param.status || 'N/A',
        'Notes': param.notes || ''
      }));

      const paramSheet = XLSX.utils.json_to_sheet(parametersData);
      paramSheet['!cols'] = [
        { wch: 30 },
        { wch: 15 },
        { wch: 15 },
        { wch: 25 },
        { wch: 15 },
        { wch: 40 }
      ];
      XLSX.utils.book_append_sheet(workbook, paramSheet, 'Test Parameters');
    }

    // Generate filename
    const timestamp = new Date().toISOString().slice(0, 10);
    const finalFilename = `${filename}_${result.id}_${timestamp}.xlsx`;

    // Download
    XLSX.writeFile(workbook, finalFilename);

    return {
      success: true,
      filename: finalFilename
    };
  } catch (error) {
    console.error('Error exporting result:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * Generate CSV for quick export
 */
export const exportResultsToCSV = (results, filename = 'NARA_Lab_Results') => {
  try {
    const headers = [
      'Result ID',
      'Test Type',
      'Sample Type',
      'Sample ID',
      'Status',
      'Project Name',
      'Date Submitted',
      'Date Completed',
      'Location',
      'Researcher'
    ];

    const rows = results.map(result => [
      result.id || '',
      result.testType || '',
      result.sampleType || '',
      result.sampleId || '',
      result.status || '',
      result.projectName || '',
      result.createdAt ? new Date(result.createdAt).toLocaleDateString() : '',
      result.completedAt ? new Date(result.completedAt).toLocaleDateString() : '',
      result.location || '',
      result.researcherName || ''
    ]);

    const csvContent = [
      headers.join(','),
      ...rows.map(row => row.map(cell => `"${cell}"`).join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    
    link.setAttribute('href', url);
    link.setAttribute('download', `${filename}_${new Date().toISOString().slice(0, 10)}.csv`);
    link.style.visibility = 'hidden';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    return {
      success: true,
      filename: `${filename}.csv`,
      recordCount: results.length
    };
  } catch (error) {
    console.error('Error exporting to CSV:', error);
    return {
      success: false,
      error: error.message
    };
  }
};
